setwd("~/Box Sync/MyProjects/Tangle")

library(nonlinearTseries)
library(geometry)
library(deSolve)
set.seed(532452)

#### Simulation Parameters ###
ts_length <- seq(20,100,20)


#### Uniform Noise ####
ts_unif <- runif(1000,0,1)
unif_res <- rep(NA,length(ts_length))
k <- 1
for(i in ts_length){
  x<-ts_unif[1:i] 
  xMat<-buildTakens(x,3,1)
  N <- nrow(xMat)
  S<-diag(N) 
  S<-S[,c(dim(S)[2],(1:(dim(S)[2]-1)))]
  W<-((diag(N)+S)/2)
  Ku<-1
  while(dim(convhulln(cbind(xMat[,1],xMat[,2])))[1]!=N &
        dim(convhulln(cbind(xMat[,1],xMat[,3])))[1]!=N &
        dim(convhulln(cbind(xMat[,2],xMat[,3])))[1]!=N){
    xMat<-scale(xMat)
    xMat<-W%*%xMat
    flush.console()
    Ku<-Ku+1
    unif_res[k] <- Ku
  }
  k <- k + 1
  print(i)
}
unif_tangle <- log(unif_res)/ts_length


#### Normal Noise ####
# ts_norm <- rnorm(1000,0,1)
# norm_res <- rep(NA,length(ts_length))
# k <- 1
# for(i in ts_length){
#   x<-ts_norm[1:i] 
#   xMat<-buildTakens(x,3,1)
#   N <- nrow(xMat)
#   S<-diag(N) 
#   S<-S[,c(dim(S)[2],(1:(dim(S)[2]-1)))]
#   W<-((diag(N)+S)/2)
#   Ku<-1
#   
#   while(dim(convhulln(cbind(xMat[,1],xMat[,2])))[1]!=N &
#         dim(convhulln(cbind(xMat[,1],xMat[,3])))[1]!=N &
#         dim(convhulln(cbind(xMat[,2],xMat[,3])))[1]!=N){
#     xMat<-scale(xMat)
#     xMat<-W%*%xMat
#     flush.console()
#     Ku<-Ku+1
#     norm_res[k] <- Ku
#   }
#   k <- k + 1
#   print(i)
# }
# norm_tangle <- log(norm_res)/ts_length

#### Lorenz ####
ts_lor<- lorenz(do.plot = F,time = seq(0, 50, by = 0.1),start = c(1, 1, 1))
lor_res <- rep(NA,length(ts_length))
k <- 1
for(i in ts_length){
  xMat<-cbind(ts_lor$x[1:i],
              ts_lor$y[1:i],
              ts_lor$z[1:i])
  N <- nrow(xMat)
  S<-diag(N) 
  S<-S[,c(dim(S)[2],(1:(dim(S)[2]-1)))]
  W<-((diag(N)+S)/2)
  Ku<-1
  
  while(dim(convhulln(cbind(xMat[,1],xMat[,2])))[1]!=N &
        dim(convhulln(cbind(xMat[,1],xMat[,3])))[1]!=N &
        dim(convhulln(cbind(xMat[,2],xMat[,3])))[1]!=N){
    xMat<-scale(xMat)
    xMat<-W%*%xMat
    flush.console()
    Ku<-Ku+1
    lor_res[k] <- Ku
  }
  k <- k + 1
  print(i)
}
lor_tangle <- log(lor_res)/ts_length

#### Rossler ####
ts_ros<- rossler(do.plot = F,time = seq(0, 100, by = 0.2))
ros_res <- rep(NA,length(ts_length))
k <- 1
for(i in ts_length){
  xMat<-cbind(ts_ros$x[1:i],
              ts_ros$y[1:i],
              ts_ros$z[1:i])
  N <- nrow(xMat)
  S<-diag(N) 
  S<-S[,c(dim(S)[2],(1:(dim(S)[2]-1)))]
  W<-((diag(N)+S)/2)
  Ku<-1
  
  while(dim(convhulln(cbind(xMat[,1],xMat[,2])))[1]!=N &
        dim(convhulln(cbind(xMat[,1],xMat[,3])))[1]!=N &
        dim(convhulln(cbind(xMat[,2],xMat[,3])))[1]!=N){
    xMat<-scale(xMat)
    xMat<-W%*%xMat
    flush.console()
    Ku<-Ku+1
    ros_res[k] <- Ku
  }
  k <- k + 1
  print(i)
}
ros_tangle <- log(ros_res)/ts_length

#### HR neuron ####

parameters<-c(a=1,b=3,I=4,c=1,d=5,r=0.0021,s=4,Xr=-8/5)
state<-c(x=0,y=0,z=0)
HRneuron<-function(t,state,parameters){
  with(as.list(c(state, parameters)),{
    dx<-y-z+I+b*x^2-a*x^3
    dy<--y+c-d*x^2
    dz<-r*s*x-r*z-r*s*Xr
    list(c(dx,dy,dz))
  })
}
times<-seq(0,100,by=.1)
out <- ode(y = state, times = times, func = HRneuron, parms = parameters)

ts_HRN <- ode(y = state, times = times, func = HRneuron, parms = parameters)
HRN_res <- rep(NA,length(ts_length))
k <- 1
for(i in ts_length){
  xMat<-cbind(ts_HRN[1:i,2],
              ts_HRN[1:i,3],
              ts_HRN[1:i,4])
  N <- nrow(xMat)
  S<-diag(N) 
  S<-S[,c(dim(S)[2],(1:(dim(S)[2]-1)))]
  W<-((diag(N)+S)/2)
  Ku<-1
  
  while(dim(convhulln(cbind(xMat[,1],xMat[,2])))[1]!=N &
        dim(convhulln(cbind(xMat[,1],xMat[,3])))[1]!=N &
        dim(convhulln(cbind(xMat[,2],xMat[,3])))[1]!=N){
    xMat<-scale(xMat)
    xMat<-W%*%xMat
    flush.console()
    Ku<-Ku+1
    HRN_res[k] <- Ku
  }
  k <- k + 1
  print(i)
}
HRN_res[which(is.na(HRN_res))] <-1
HRN_tangle <- log(HRN_res)/ts_length

#### Sine Wave

ts_Sin<- sin(seq(0,32*pi,length.out=1000)) + rnorm(1000,0,.05)
Sin_res <- rep(NA,length(ts_length))
k <- 1
for(i in ts_length){
  xMat<-buildTakens(ts_Sin[1:i],3,1)
  xMat <- svd(xMat)$u
  N <- nrow(xMat)
  S<-diag(N) 
  S<-S[,c(dim(S)[2],(1:(dim(S)[2]-1)))]
  W<-((diag(N)+S)/2)
  Ku<-1
  
  while(dim(convhulln(cbind(xMat[,1],xMat[,2])))[1]!=N &
        dim(convhulln(cbind(xMat[,1],xMat[,3])))[1]!=N &
        dim(convhulln(cbind(xMat[,2],xMat[,3])))[1]!=N){
    xMat<-scale(xMat)
    xMat<-W%*%xMat
    flush.console()
    Ku<-Ku+1
    Sin_res[k] <- Ku
  }
  k <- k + 1
  print(i)
}
Sin_res[which(is.na(Sin_res))] <- 1
Sin_tangle <- log(Sin_res)/ts_length

range(unif_tangle)
range(lor_tangle) 
range(ros_tangle)
range(HRN_tangle)
range(Sin_tangle)

tangleDat <- data.frame(unif_tangle,
                        lor_tangle,
                        ros_tangle,
                        HRN_tangle,
                        Sin_tangle)
write.csv(tangleDat,"tangleDat.csv",row.names = FALSE)
tiff(filename = "Figure4.tiff", 
     width = 85, height = 85, units = "mm",
     bg = "white",  res = 300, compression = "lzw")
par(mgp=c(1,.5,0))

#tangleDat <- read.csv("tangleDat.csv")
plot(ts_length,tangleDat$unif_tangle,xlab = "T", ylab = "Tangle",type="l",ylim = c(min(c(tangleDat$unif_tangle,
                                                                                         tangleDat$lor_tangle,
                                                                                         tangleDat$ros_tangle,
                                                                                         tangleDat$HRN_tangle)),
                                                               max(c(tangleDat$unif_tangle,
                                                                     tangleDat$lor_tangle,
                                                                     tangleDat$ros_tangle,
                                                                     tangleDat$HRN_tangle))),
     lwd=1,cex.axis=.4,cex.lab=.4)

lines(ts_length,tangleDat$lor_tangle,lwd=1,lty=2)
lines(ts_length,tangleDat$ros_tangle,lwd=1,lty=3)
lines(ts_length,tangleDat$HRN_tangle,lwd=1,lty=4)
lines(ts_length,tangleDat$Sin_tangle,lwd=3,lty=6)

legend("topright",legend = c("(A) Uniform", "(B) Lorenz", "(C) Rossler", "(D) Neuron", "(E) Sine"),
       lty=c(1,2,3,4,6),cex=.4,lwd=1, seg.len = 5)    

dev.off()
